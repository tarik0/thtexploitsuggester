#!/usr/bin/env python3
# -- coding: utf-8 --

import nmap
import colorama
from sys import argv
import socket
import shodan
from time import sleep

def SearchExploit():
    api = shodan.Shodan(shodankey)
    print('')
    print(colorama.Back.MAGENTA +
          "ADI" +
          " " *
          (50 -
           len("ADI")) +
          "SERVİS" +
          " " *
          (15 -
              len("SERVİS")) +
          "KAYNAK" +
          " " *
          (15 -
              len("KAYNAK")) +
          "AÇIKLAMA" +
          colorama.Style.RESET_ALL)

    for port in tcpports:
        try:
            if (os == "NONE"):
                if (port['product'] != ""):
                    result = api.exploits.search(
                        port['product'], page=1, facets={
                            "platorm": os})
                else:
                    continue
            else:
                if (port['product'] != ""):
                    result = api.exploits.search(
                        port['product'], page=1, facets=None)
                else:
                    continue

            if ((result['total'] > 0) and (len(result['matches']) > 0)):
                if (result['total'] > 20):
                    maxresult = 20
                else:
                    maxresult = result['total']

                k = 0
                while(k != maxresult):
                    try:
                        if (result['matches'][k]['source'] == "ExploitDB"):
                            print((result['matches'][k]['description'][:45]) +
                                  " " *
                                  (50 -
                                   len((result['matches'][k]['description'][:45]))) +
                                  port['name'].upper() +
                                  " " *
                                  (15 -
                                   len(port['name'])) +
                                  result['matches'][k]['source'] +
                                  " " *
                                  (15 -
                                   len(result['matches'][k]['source'])) +
                                  result['matches'][k]['description'][:20] +
                                  "...")
                        elif (result['matches'][k]['source'] == "Metasploit"):
                            print((result['matches'][k]['_id'][:45]) +
                                  " " *
                                  (50 -
                                   len(result['matches'][k]['_id'][:45])) +
                                  port['name'].upper() +
                                  " " *
                                  (15 -
                                   len(port['name'])) +
                                  result['matches'][k]['source'] +
                                  " " *
                                  (15 -
                                   len(result['matches'][k]['source'])) +
                                  result['matches'][k]['description'][:20] +
                                  "...")
                        k = k + 1
                    except Exception as e:
                        pass
                sleep(1.5)
        except BaseException:
            continue


def ReadyNMAP():
    nm = nmap.PortScanner()
    nm.scan(ip, arguments='-sV -O -Pn' + ' '.join(argv[2:]))
    if (nm[ip].state() == "up"):
        PrintSuccess("Taranan Host Durumu: UP")
    else:
        PrintError("Taranan Host Durumu: " + nm[ip].state().upper())
        exit()

    PrintSuccess("Taranan PORT sayısı: " +
                 str(len(nm[ip].all_tcp()) +
                     len(nm[ip].all_udp()) +
                     len(nm[ip].all_sctp())))
    global tcpports
    tcpports = []
    for tcpport in nm[ip].all_tcp():
        if (tcpport):
            tcpports.append(nm[ip].tcp(tcpport))
    print("")
    print(
        colorama.Back.GREEN +
        "TCP SERVİSLERİ      TCP PORTLARI        VERSİYONLARI" +
        colorama.Style.RESET_ALL)
    i = 0
    for tcpport in tcpports:
        if (tcpport['name'] != "unknown"):
            if (tcpport['product']):
                product = tcpport['product']
            else:
                product = ""
            print(tcpport['name'].upper() +
                  " " *
                  (20 -
                   len(tcpport['name'])) +
                  str(nm[ip].all_tcp()[i]) +
                  " " *
                  (20 -
                   len(str(nm[ip].all_tcp()[i]))) +
                  product)
            i = i + 1
    print("")
    global os
    os = "NONE"
    osaccuracy = 0
    for opsystem in nm[ip]['osmatch'][0]['osclass']:
        if(osaccuracy < int(opsystem['accuracy'])):
            os = opsystem['osfamily'].lower()
    if (os != "NONE"):
        PrintSuccess("Muhtemel işletim sistemi: " + os)
    PrintSuccess("PORT Tarama Başarılı!")
    PrintStatus("Exploitler Aranıyor!")


def PrintSuccess(str):
    print(
        colorama.Fore.GREEN +
        "[THT Exploit Önerici] " +
        colorama.Style.RESET_ALL +
        str)


def PrintStatus(str):
    print(
        colorama.Fore.YELLOW +
        "[THT Exploit Önerici] " +
        colorama.Style.RESET_ALL +
        str)


def PrintError(str):
    print(
        colorama.Fore.RED +
        "[THT Exploit Önerici] " +
        colorama.Style.RESET_ALL +
        str)


if __name__ == "__main__":
    colorama.init()
    if (len(argv) <= 1):
        PrintError("IP adresi bulunamadı.")
        exit()
    global ip
    try:
        ip = socket.gethostbyname(argv[1])
    except BaseException:
        PrintError("IP adresi bulunamadı.")
        exit()
    if (len(argv) == 2):
        PrintStatus(ip + " IP'sine NMAP taraması başlatıldı!")
    else:
        PrintStatus(ip +
                    " IP'sine '" +
                    ' '.join(argv[2:]) +
                    "' parametreleriyle NMAP taraması başlatıldı!")

    try:
        ReadyNMAP()
    except Exception as e:
        PrintError("Taranırken bir hata oluştü lütfen sonra tekrar deneyiniz.")
        exit()

    try:
        global shodankey
        file = open("shodankey.txt", 'r')
        shodankey = file.readlines()[0]
    except BaseException:
        PrintError("Shodan API Key'i bulunamadı!")
        exit()

    try:
        SearchExploit()
    except BaseException:
        PrintError(
            "Exploit aranırken bir sorun oluştu lütfen sonra tekrar deneyiniz!")
        exit()

    print('')
    PrintSuccess("Beni kullandığınız için teşekkür ederim!")
    print('')
